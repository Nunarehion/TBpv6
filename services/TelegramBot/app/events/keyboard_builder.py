import re
from typing import Optional
from bson import ObjectId
from aiogram import types

from app.storage.mongo_db import read_data 

url_pattern = re.compile(r'^(https?://|www\.)[^\s/$.?#].[^\s]*$')


async def get_button_by_id(button_id: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ `buttons` –ø–æ –µ—ë ObjectId.

    :param button_id: –°—Ç—Ä–æ–∫–æ–≤—ã–π ID –∫–Ω–æ–ø–∫–∏ (Mongo ObjectId).
    :return: –î–æ–∫—É–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    collection = await read_data("buttons")
    return await collection.find_one({"_id": ObjectId(button_id)})


async def get_keyboard_by_name(name: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ `keyboards` –ø–æ –∏–º–µ–Ω–∏.

    :param name: –ò–º—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    :return: –î–æ–∫—É–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    collection = await read_data("keyboards")
    return await collection.find_one({"name": name})


async def build_inline_keyboard(keyboard_data: dict) -> types.InlineKeyboardMarkup:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏–±–æ `callback_data`, –ª–∏–±–æ URL.

    :param keyboard_data: –î–æ–∫—É–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ MongoDB —Å–æ —Å–ø–∏—Å–∫–æ–º ID –∫–Ω–æ–ø–æ–∫.
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup.
    """
    keyboard = []

    for row in keyboard_data.get("buttons", []):
        button_row = []

        for button_ref in row:
            button_id = button_ref.get("id")
            if not button_id:
                continue

            button_data = await get_button_by_id(button_id)
            if not button_data:
                continue

            text = button_data.get("text", "üîò")
            callback_data = button_data.get("callback_data")

            if callback_data:
                if url_pattern.match(callback_data):
                    button = types.InlineKeyboardButton(text=text, url=callback_data)
                else:
                    button = types.InlineKeyboardButton(text=text, callback_data=callback_data)
                button_row.append(button)

        if button_row:
            keyboard.append(button_row)

    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)
